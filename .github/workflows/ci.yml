name: CI Pipeline

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job 1: Verificación de código y calidad
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🔍 Información del entorno
        run: |
          echo "🎯 Rama: ${{ github.ref }}"
          echo "🔧 Evento: ${{ github.event_name }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "📦 SHA: ${{ github.sha }}"
      
      - name: 📋 Verificar estructura del proyecto
        run: |
          echo "📁 Estructura del proyecto:"
          ls -la
          echo ""
          echo "🔍 Buscando archivos importantes:"
          [ -f "docker-compose.yml" ] && echo "✅ docker-compose.yml encontrado" || echo "⚠️ docker-compose.yml NO encontrado"
          [ -f "Makefile" ] && echo "✅ Makefile encontrado" || echo "⚠️ Makefile NO encontrado"
          [ -d "src" ] && echo "✅ Directorio src/ encontrado" || echo "⚠️ Directorio src/ NO encontrado"
          [ -f "README.md" ] && echo "✅ README.md encontrado" || echo "⚠️ README.md NO encontrado"
  
  # Job 2: Build y validación de Docker
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🐋 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host
      
      - name: 🔧 Verificar Docker y Docker Compose
        run: |
          docker --version
          docker compose version

      
      - name: 📝 Crear docker-compose.yml temporal si no existe
        run: |
          if [ ! -f "docker-compose.yml" ]; then
            echo "⚠️ docker-compose.yml no encontrado. Creando uno temporal para testing..."
            cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            test:
              image: alpine:latest
              command: echo "CI/CD Pipeline funcionando correctamente!"
          EOF
            echo "✅ docker-compose.yml temporal creado"
          fi
      
      - name: 🏗️ Validar sintaxis docker-compose
        run: docker compose config
      
      - name: 🚀 Test build (si existe Dockerfile)
        run: |
          if [ -f "Dockerfile" ]; then
            echo "🏗️ Construyendo imagen Docker..."
            docker build -t ci-test:latest .
          else
            echo "ℹ️ No hay Dockerfile aún, saltando build"
          fi
  
  # Job 3: Tests (placeholder para el futuro)
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🧪 Ejecutar tests
        run: |
          echo "🧪 Placeholder para futuros tests..."
          echo "📝 TODO: Añadir tests unitarios"
          echo "📝 TODO: Añadir tests de integración"
          echo "📝 TODO: Añadir análisis de cobertura"
      
      - name: 📊 Reporte de salud del proyecto
        if: always()
        run: |
          echo "📊 === REPORTE DE SALUD DEL PROYECTO ==="
          echo ""
          echo "✅ CI/CD Pipeline: OPERATIVO"
          echo "⏳ Docker Setup: PENDIENTE (Tareas 1.2-1.5)"
          echo "⏳ Tests: PENDIENTE (Por implementar)"
          echo "⏳ Servicios: PENDIENTE (Fase 2)"
          echo ""
          echo "🎯 Siguiente paso: Implementar docker-compose.yml con servicios base"
